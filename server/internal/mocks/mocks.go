// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	ced "github.com/bradenrayhorn/ced/server/ced"
)

// MockCountable is a mock implementation of the Countable interface (from
// the package github.com/bradenrayhorn/ced/server/ced) used for unit testing.
type MockCountable struct {
	// LengthFunc is an instance of a mock function object controlling the
	// behavior of the method Length.
	LengthFunc *CountableLengthFunc
}

// NewMockCountable creates a new mock of the Countable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
	}
}

// NewStrictMockCountable creates a new mock of the Countable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockCountable.Length")
			},
		},
	}
}

// NewMockCountableFrom creates a new mock of the MockCountable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockCountableFrom(i ced.Countable) *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: i.Length,
		},
	}
}

// CountableLengthFunc describes the behavior when the Length method of the
// parent MockCountable instance is invoked.
type CountableLengthFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []CountableLengthFuncCall
	mutex       sync.Mutex
}

// Length delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCountable) Length() int {
	r0 := m.LengthFunc.nextHook()()
	m.LengthFunc.appendCall(CountableLengthFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Length method of the
// parent MockCountable instance is invoked and the hook queue is empty.
func (f *CountableLengthFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Length method of the parent MockCountable instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CountableLengthFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CountableLengthFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CountableLengthFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *CountableLengthFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CountableLengthFunc) appendCall(r0 CountableLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CountableLengthFuncCall objects describing
// the invocations of this function.
func (f *CountableLengthFunc) History() []CountableLengthFuncCall {
	f.mutex.Lock()
	history := make([]CountableLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CountableLengthFuncCall is an object that describes an invocation of
// method Length on an instance of MockCountable.
type CountableLengthFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CountableLengthFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CountableLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEmptiable is a mock implementation of the Emptiable interface (from
// the package github.com/bradenrayhorn/ced/server/ced) used for unit testing.
type MockEmptiable struct {
	// EmptyFunc is an instance of a mock function object controlling the
	// behavior of the method Empty.
	EmptyFunc *EmptiableEmptyFunc
}

// NewMockEmptiable creates a new mock of the Emptiable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockEmptiable creates a new mock of the Emptiable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockEmptiable.Empty")
			},
		},
	}
}

// NewMockEmptiableFrom creates a new mock of the MockEmptiable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockEmptiableFrom(i ced.Emptiable) *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: i.Empty,
		},
	}
}

// EmptiableEmptyFunc describes the behavior when the Empty method of the
// parent MockEmptiable instance is invoked.
type EmptiableEmptyFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []EmptiableEmptyFuncCall
	mutex       sync.Mutex
}

// Empty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEmptiable) Empty() bool {
	r0 := m.EmptyFunc.nextHook()()
	m.EmptyFunc.appendCall(EmptiableEmptyFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Empty method of the
// parent MockEmptiable instance is invoked and the hook queue is empty.
func (f *EmptiableEmptyFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Empty method of the parent MockEmptiable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *EmptiableEmptyFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EmptiableEmptyFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EmptiableEmptyFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *EmptiableEmptyFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EmptiableEmptyFunc) appendCall(r0 EmptiableEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EmptiableEmptyFuncCall objects describing
// the invocations of this function.
func (f *EmptiableEmptyFunc) History() []EmptiableEmptyFuncCall {
	f.mutex.Lock()
	history := make([]EmptiableEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EmptiableEmptyFuncCall is an object that describes an invocation of
// method Empty on an instance of MockEmptiable.
type EmptiableEmptyFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EmptiableEmptyFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EmptiableEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockError is a mock implementation of the Error interface (from the
// package github.com/bradenrayhorn/ced/server/ced) used for unit testing.
type MockError struct {
	// CedErrorFunc is an instance of a mock function object controlling the
	// behavior of the method CedError.
	CedErrorFunc *ErrorCedErrorFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *ErrorErrorFunc
}

// NewMockError creates a new mock of the Error interface. All methods
// return zero values for all results, unless overwritten.
func NewMockError() *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: func() (r0 string, r1 string) {
				return
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
	}
}

// NewStrictMockError creates a new mock of the Error interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockError() *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: func() (string, string) {
				panic("unexpected invocation of MockError.CedError")
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockError.Error")
			},
		},
	}
}

// NewMockErrorFrom creates a new mock of the MockError interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockErrorFrom(i ced.Error) *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: i.CedError,
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: i.Error,
		},
	}
}

// ErrorCedErrorFunc describes the behavior when the CedError method of the
// parent MockError instance is invoked.
type ErrorCedErrorFunc struct {
	defaultHook func() (string, string)
	hooks       []func() (string, string)
	history     []ErrorCedErrorFuncCall
	mutex       sync.Mutex
}

// CedError delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) CedError() (string, string) {
	r0, r1 := m.CedErrorFunc.nextHook()()
	m.CedErrorFunc.appendCall(ErrorCedErrorFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CedError method of
// the parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorCedErrorFunc) SetDefaultHook(hook func() (string, string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CedError method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorCedErrorFunc) PushHook(hook func() (string, string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorCedErrorFunc) SetDefaultReturn(r0 string, r1 string) {
	f.SetDefaultHook(func() (string, string) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorCedErrorFunc) PushReturn(r0 string, r1 string) {
	f.PushHook(func() (string, string) {
		return r0, r1
	})
}

func (f *ErrorCedErrorFunc) nextHook() func() (string, string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorCedErrorFunc) appendCall(r0 ErrorCedErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorCedErrorFuncCall objects describing
// the invocations of this function.
func (f *ErrorCedErrorFunc) History() []ErrorCedErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorCedErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorCedErrorFuncCall is an object that describes an invocation of method
// CedError on an instance of MockError.
type ErrorCedErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorCedErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorCedErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ErrorErrorFunc describes the behavior when the Error method of the parent
// MockError instance is invoked.
type ErrorErrorFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ErrorErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) Error() string {
	r0 := m.ErrorFunc.nextHook()()
	m.ErrorFunc.appendCall(ErrorErrorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorErrorFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorErrorFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorErrorFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorErrorFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ErrorErrorFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorErrorFunc) appendCall(r0 ErrorErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorErrorFuncCall objects describing the
// invocations of this function.
func (f *ErrorErrorFunc) History() []ErrorErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockError.
type ErrorErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGroupContract is a mock implementation of the GroupContract interface
// (from the package github.com/bradenrayhorn/ced/server/ced) used for unit
// testing.
type MockGroupContract struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GroupContractCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GroupContractGetFunc
	// RespondFunc is an instance of a mock function object controlling the
	// behavior of the method Respond.
	RespondFunc *GroupContractRespondFunc
	// SearchFunc is an instance of a mock function object controlling the
	// behavior of the method Search.
	SearchFunc *GroupContractSearchFunc
}

// NewMockGroupContract creates a new mock of the GroupContract interface.
// All methods return zero values for all results, unless overwritten.
func NewMockGroupContract() *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: func(context.Context, ced.Name, uint8) (r0 ced.Group, r1 error) {
				return
			},
		},
		GetFunc: &GroupContractGetFunc{
			defaultHook: func(context.Context, ced.ID) (r0 ced.Group, r1 error) {
				return
			},
		},
		RespondFunc: &GroupContractRespondFunc{
			defaultHook: func(context.Context, ced.ID, uint8) (r0 error) {
				return
			},
		},
		SearchFunc: &GroupContractSearchFunc{
			defaultHook: func(context.Context, string) (r0 []ced.Group, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGroupContract creates a new mock of the GroupContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGroupContract() *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: func(context.Context, ced.Name, uint8) (ced.Group, error) {
				panic("unexpected invocation of MockGroupContract.Create")
			},
		},
		GetFunc: &GroupContractGetFunc{
			defaultHook: func(context.Context, ced.ID) (ced.Group, error) {
				panic("unexpected invocation of MockGroupContract.Get")
			},
		},
		RespondFunc: &GroupContractRespondFunc{
			defaultHook: func(context.Context, ced.ID, uint8) error {
				panic("unexpected invocation of MockGroupContract.Respond")
			},
		},
		SearchFunc: &GroupContractSearchFunc{
			defaultHook: func(context.Context, string) ([]ced.Group, error) {
				panic("unexpected invocation of MockGroupContract.Search")
			},
		},
	}
}

// NewMockGroupContractFrom creates a new mock of the MockGroupContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGroupContractFrom(i ced.GroupContract) *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &GroupContractGetFunc{
			defaultHook: i.Get,
		},
		RespondFunc: &GroupContractRespondFunc{
			defaultHook: i.Respond,
		},
		SearchFunc: &GroupContractSearchFunc{
			defaultHook: i.Search,
		},
	}
}

// GroupContractCreateFunc describes the behavior when the Create method of
// the parent MockGroupContract instance is invoked.
type GroupContractCreateFunc struct {
	defaultHook func(context.Context, ced.Name, uint8) (ced.Group, error)
	hooks       []func(context.Context, ced.Name, uint8) (ced.Group, error)
	history     []GroupContractCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupContract) Create(v0 context.Context, v1 ced.Name, v2 uint8) (ced.Group, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2)
	m.CreateFunc.appendCall(GroupContractCreateFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGroupContract instance is invoked and the hook queue is empty.
func (f *GroupContractCreateFunc) SetDefaultHook(hook func(context.Context, ced.Name, uint8) (ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGroupContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupContractCreateFunc) PushHook(hook func(context.Context, ced.Name, uint8) (ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupContractCreateFunc) SetDefaultReturn(r0 ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.Name, uint8) (ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupContractCreateFunc) PushReturn(r0 ced.Group, r1 error) {
	f.PushHook(func(context.Context, ced.Name, uint8) (ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupContractCreateFunc) nextHook() func(context.Context, ced.Name, uint8) (ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupContractCreateFunc) appendCall(r0 GroupContractCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupContractCreateFuncCall objects
// describing the invocations of this function.
func (f *GroupContractCreateFunc) History() []GroupContractCreateFuncCall {
	f.mutex.Lock()
	history := make([]GroupContractCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupContractCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockGroupContract.
type GroupContractCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Name
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint8
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupContractCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupContractCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GroupContractGetFunc describes the behavior when the Get method of the
// parent MockGroupContract instance is invoked.
type GroupContractGetFunc struct {
	defaultHook func(context.Context, ced.ID) (ced.Group, error)
	hooks       []func(context.Context, ced.ID) (ced.Group, error)
	history     []GroupContractGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupContract) Get(v0 context.Context, v1 ced.ID) (ced.Group, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(GroupContractGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGroupContract instance is invoked and the hook queue is empty.
func (f *GroupContractGetFunc) SetDefaultHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGroupContract instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupContractGetFunc) PushHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupContractGetFunc) SetDefaultReturn(r0 ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupContractGetFunc) PushReturn(r0 ced.Group, r1 error) {
	f.PushHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupContractGetFunc) nextHook() func(context.Context, ced.ID) (ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupContractGetFunc) appendCall(r0 GroupContractGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupContractGetFuncCall objects describing
// the invocations of this function.
func (f *GroupContractGetFunc) History() []GroupContractGetFuncCall {
	f.mutex.Lock()
	history := make([]GroupContractGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupContractGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGroupContract.
type GroupContractGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupContractGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupContractGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GroupContractRespondFunc describes the behavior when the Respond method
// of the parent MockGroupContract instance is invoked.
type GroupContractRespondFunc struct {
	defaultHook func(context.Context, ced.ID, uint8) error
	hooks       []func(context.Context, ced.ID, uint8) error
	history     []GroupContractRespondFuncCall
	mutex       sync.Mutex
}

// Respond delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupContract) Respond(v0 context.Context, v1 ced.ID, v2 uint8) error {
	r0 := m.RespondFunc.nextHook()(v0, v1, v2)
	m.RespondFunc.appendCall(GroupContractRespondFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Respond method of
// the parent MockGroupContract instance is invoked and the hook queue is
// empty.
func (f *GroupContractRespondFunc) SetDefaultHook(hook func(context.Context, ced.ID, uint8) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Respond method of the parent MockGroupContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupContractRespondFunc) PushHook(hook func(context.Context, ced.ID, uint8) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupContractRespondFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.ID, uint8) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupContractRespondFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.ID, uint8) error {
		return r0
	})
}

func (f *GroupContractRespondFunc) nextHook() func(context.Context, ced.ID, uint8) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupContractRespondFunc) appendCall(r0 GroupContractRespondFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupContractRespondFuncCall objects
// describing the invocations of this function.
func (f *GroupContractRespondFunc) History() []GroupContractRespondFuncCall {
	f.mutex.Lock()
	history := make([]GroupContractRespondFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupContractRespondFuncCall is an object that describes an invocation of
// method Respond on an instance of MockGroupContract.
type GroupContractRespondFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 uint8
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupContractRespondFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupContractRespondFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GroupContractSearchFunc describes the behavior when the Search method of
// the parent MockGroupContract instance is invoked.
type GroupContractSearchFunc struct {
	defaultHook func(context.Context, string) ([]ced.Group, error)
	hooks       []func(context.Context, string) ([]ced.Group, error)
	history     []GroupContractSearchFuncCall
	mutex       sync.Mutex
}

// Search delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupContract) Search(v0 context.Context, v1 string) ([]ced.Group, error) {
	r0, r1 := m.SearchFunc.nextHook()(v0, v1)
	m.SearchFunc.appendCall(GroupContractSearchFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Search method of the
// parent MockGroupContract instance is invoked and the hook queue is empty.
func (f *GroupContractSearchFunc) SetDefaultHook(hook func(context.Context, string) ([]ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Search method of the parent MockGroupContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupContractSearchFunc) PushHook(hook func(context.Context, string) ([]ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupContractSearchFunc) SetDefaultReturn(r0 []ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupContractSearchFunc) PushReturn(r0 []ced.Group, r1 error) {
	f.PushHook(func(context.Context, string) ([]ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupContractSearchFunc) nextHook() func(context.Context, string) ([]ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupContractSearchFunc) appendCall(r0 GroupContractSearchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupContractSearchFuncCall objects
// describing the invocations of this function.
func (f *GroupContractSearchFunc) History() []GroupContractSearchFuncCall {
	f.mutex.Lock()
	history := make([]GroupContractSearchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupContractSearchFuncCall is an object that describes an invocation of
// method Search on an instance of MockGroupContract.
type GroupContractSearchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupContractSearchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupContractSearchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGroupRespository is a mock implementation of the GroupRespository
// interface (from the package github.com/bradenrayhorn/ced/server/ced) used for
// unit testing.
type MockGroupRespository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GroupRespositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GroupRespositoryGetFunc
	// SearchByNameFunc is an instance of a mock function object controlling
	// the behavior of the method SearchByName.
	SearchByNameFunc *GroupRespositorySearchByNameFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *GroupRespositoryUpdateFunc
}

// NewMockGroupRespository creates a new mock of the GroupRespository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGroupRespository() *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Group) (r0 error) {
				return
			},
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (r0 ced.Group, r1 error) {
				return
			},
		},
		SearchByNameFunc: &GroupRespositorySearchByNameFunc{
			defaultHook: func(context.Context, string) (r0 []ced.Group, r1 error) {
				return
			},
		},
		UpdateFunc: &GroupRespositoryUpdateFunc{
			defaultHook: func(context.Context, ced.Group) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockGroupRespository creates a new mock of the GroupRespository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGroupRespository() *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Group) error {
				panic("unexpected invocation of MockGroupRespository.Create")
			},
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (ced.Group, error) {
				panic("unexpected invocation of MockGroupRespository.Get")
			},
		},
		SearchByNameFunc: &GroupRespositorySearchByNameFunc{
			defaultHook: func(context.Context, string) ([]ced.Group, error) {
				panic("unexpected invocation of MockGroupRespository.SearchByName")
			},
		},
		UpdateFunc: &GroupRespositoryUpdateFunc{
			defaultHook: func(context.Context, ced.Group) error {
				panic("unexpected invocation of MockGroupRespository.Update")
			},
		},
	}
}

// NewMockGroupRespositoryFrom creates a new mock of the
// MockGroupRespository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGroupRespositoryFrom(i ced.GroupRespository) *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: i.Get,
		},
		SearchByNameFunc: &GroupRespositorySearchByNameFunc{
			defaultHook: i.SearchByName,
		},
		UpdateFunc: &GroupRespositoryUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// GroupRespositoryCreateFunc describes the behavior when the Create method
// of the parent MockGroupRespository instance is invoked.
type GroupRespositoryCreateFunc struct {
	defaultHook func(context.Context, ced.Group) error
	hooks       []func(context.Context, ced.Group) error
	history     []GroupRespositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupRespository) Create(v0 context.Context, v1 ced.Group) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(GroupRespositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGroupRespository instance is invoked and the hook queue is
// empty.
func (f *GroupRespositoryCreateFunc) SetDefaultHook(hook func(context.Context, ced.Group) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGroupRespository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GroupRespositoryCreateFunc) PushHook(hook func(context.Context, ced.Group) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.Group) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.Group) error {
		return r0
	})
}

func (f *GroupRespositoryCreateFunc) nextHook() func(context.Context, ced.Group) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositoryCreateFunc) appendCall(r0 GroupRespositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *GroupRespositoryCreateFunc) History() []GroupRespositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockGroupRespository.
type GroupRespositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Group
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GroupRespositoryGetFunc describes the behavior when the Get method of the
// parent MockGroupRespository instance is invoked.
type GroupRespositoryGetFunc struct {
	defaultHook func(context.Context, ced.ID) (ced.Group, error)
	hooks       []func(context.Context, ced.ID) (ced.Group, error)
	history     []GroupRespositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupRespository) Get(v0 context.Context, v1 ced.ID) (ced.Group, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(GroupRespositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGroupRespository instance is invoked and the hook queue is
// empty.
func (f *GroupRespositoryGetFunc) SetDefaultHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGroupRespository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupRespositoryGetFunc) PushHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositoryGetFunc) SetDefaultReturn(r0 ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositoryGetFunc) PushReturn(r0 ced.Group, r1 error) {
	f.PushHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupRespositoryGetFunc) nextHook() func(context.Context, ced.ID) (ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositoryGetFunc) appendCall(r0 GroupRespositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositoryGetFuncCall objects
// describing the invocations of this function.
func (f *GroupRespositoryGetFunc) History() []GroupRespositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGroupRespository.
type GroupRespositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GroupRespositorySearchByNameFunc describes the behavior when the
// SearchByName method of the parent MockGroupRespository instance is
// invoked.
type GroupRespositorySearchByNameFunc struct {
	defaultHook func(context.Context, string) ([]ced.Group, error)
	hooks       []func(context.Context, string) ([]ced.Group, error)
	history     []GroupRespositorySearchByNameFuncCall
	mutex       sync.Mutex
}

// SearchByName delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockGroupRespository) SearchByName(v0 context.Context, v1 string) ([]ced.Group, error) {
	r0, r1 := m.SearchByNameFunc.nextHook()(v0, v1)
	m.SearchByNameFunc.appendCall(GroupRespositorySearchByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SearchByName method
// of the parent MockGroupRespository instance is invoked and the hook queue
// is empty.
func (f *GroupRespositorySearchByNameFunc) SetDefaultHook(hook func(context.Context, string) ([]ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchByName method of the parent MockGroupRespository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *GroupRespositorySearchByNameFunc) PushHook(hook func(context.Context, string) ([]ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositorySearchByNameFunc) SetDefaultReturn(r0 []ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositorySearchByNameFunc) PushReturn(r0 []ced.Group, r1 error) {
	f.PushHook(func(context.Context, string) ([]ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupRespositorySearchByNameFunc) nextHook() func(context.Context, string) ([]ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositorySearchByNameFunc) appendCall(r0 GroupRespositorySearchByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositorySearchByNameFuncCall
// objects describing the invocations of this function.
func (f *GroupRespositorySearchByNameFunc) History() []GroupRespositorySearchByNameFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositorySearchByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositorySearchByNameFuncCall is an object that describes an
// invocation of method SearchByName on an instance of MockGroupRespository.
type GroupRespositorySearchByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositorySearchByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositorySearchByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GroupRespositoryUpdateFunc describes the behavior when the Update method
// of the parent MockGroupRespository instance is invoked.
type GroupRespositoryUpdateFunc struct {
	defaultHook func(context.Context, ced.Group) error
	hooks       []func(context.Context, ced.Group) error
	history     []GroupRespositoryUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupRespository) Update(v0 context.Context, v1 ced.Group) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(GroupRespositoryUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockGroupRespository instance is invoked and the hook queue is
// empty.
func (f *GroupRespositoryUpdateFunc) SetDefaultHook(hook func(context.Context, ced.Group) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockGroupRespository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GroupRespositoryUpdateFunc) PushHook(hook func(context.Context, ced.Group) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositoryUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.Group) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositoryUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.Group) error {
		return r0
	})
}

func (f *GroupRespositoryUpdateFunc) nextHook() func(context.Context, ced.Group) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositoryUpdateFunc) appendCall(r0 GroupRespositoryUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositoryUpdateFuncCall objects
// describing the invocations of this function.
func (f *GroupRespositoryUpdateFunc) History() []GroupRespositoryUpdateFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositoryUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositoryUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockGroupRespository.
type GroupRespositoryUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Group
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositoryUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositoryUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockValidatable is a mock implementation of the Validatable interface
// (from the package github.com/bradenrayhorn/ced/server/ced) used for unit
// testing.
type MockValidatable struct {
	// ValidateFunc is an instance of a mock function object controlling the
	// behavior of the method Validate.
	ValidateFunc *ValidatableValidateFunc
}

// NewMockValidatable creates a new mock of the Validatable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockValidatable creates a new mock of the Validatable interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockValidatable.Validate")
			},
		},
	}
}

// NewMockValidatableFrom creates a new mock of the MockValidatable
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockValidatableFrom(i ced.Validatable) *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: i.Validate,
		},
	}
}

// ValidatableValidateFunc describes the behavior when the Validate method
// of the parent MockValidatable instance is invoked.
type ValidatableValidateFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ValidatableValidateFuncCall
	mutex       sync.Mutex
}

// Validate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockValidatable) Validate() error {
	r0 := m.ValidateFunc.nextHook()()
	m.ValidateFunc.appendCall(ValidatableValidateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Validate method of
// the parent MockValidatable instance is invoked and the hook queue is
// empty.
func (f *ValidatableValidateFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Validate method of the parent MockValidatable instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ValidatableValidateFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ValidatableValidateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ValidatableValidateFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ValidatableValidateFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ValidatableValidateFunc) appendCall(r0 ValidatableValidateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ValidatableValidateFuncCall objects
// describing the invocations of this function.
func (f *ValidatableValidateFunc) History() []ValidatableValidateFuncCall {
	f.mutex.Lock()
	history := make([]ValidatableValidateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ValidatableValidateFuncCall is an object that describes an invocation of
// method Validate on an instance of MockValidatable.
type ValidatableValidateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ValidatableValidateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ValidatableValidateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
