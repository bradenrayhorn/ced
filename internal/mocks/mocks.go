// Code generated by go-mockgen 1.3.7; DO NOT EDIT.

package mocks

import (
	"context"
	"sync"

	ced "github.com/bradenrayhorn/ced/ced"
)

// MockCountable is a mock implementation of the Countable interface (from
// the package github.com/bradenrayhorn/ced/ced) used for unit testing.
type MockCountable struct {
	// LengthFunc is an instance of a mock function object controlling the
	// behavior of the method Length.
	LengthFunc *CountableLengthFunc
}

// NewMockCountable creates a new mock of the Countable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() (r0 int) {
				return
			},
		},
	}
}

// NewStrictMockCountable creates a new mock of the Countable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockCountable() *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: func() int {
				panic("unexpected invocation of MockCountable.Length")
			},
		},
	}
}

// NewMockCountableFrom creates a new mock of the MockCountable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockCountableFrom(i ced.Countable) *MockCountable {
	return &MockCountable{
		LengthFunc: &CountableLengthFunc{
			defaultHook: i.Length,
		},
	}
}

// CountableLengthFunc describes the behavior when the Length method of the
// parent MockCountable instance is invoked.
type CountableLengthFunc struct {
	defaultHook func() int
	hooks       []func() int
	history     []CountableLengthFuncCall
	mutex       sync.Mutex
}

// Length delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCountable) Length() int {
	r0 := m.LengthFunc.nextHook()()
	m.LengthFunc.appendCall(CountableLengthFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Length method of the
// parent MockCountable instance is invoked and the hook queue is empty.
func (f *CountableLengthFunc) SetDefaultHook(hook func() int) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Length method of the parent MockCountable instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CountableLengthFunc) PushHook(hook func() int) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CountableLengthFunc) SetDefaultReturn(r0 int) {
	f.SetDefaultHook(func() int {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CountableLengthFunc) PushReturn(r0 int) {
	f.PushHook(func() int {
		return r0
	})
}

func (f *CountableLengthFunc) nextHook() func() int {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CountableLengthFunc) appendCall(r0 CountableLengthFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CountableLengthFuncCall objects describing
// the invocations of this function.
func (f *CountableLengthFunc) History() []CountableLengthFuncCall {
	f.mutex.Lock()
	history := make([]CountableLengthFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CountableLengthFuncCall is an object that describes an invocation of
// method Length on an instance of MockCountable.
type CountableLengthFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CountableLengthFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CountableLengthFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockEmptiable is a mock implementation of the Emptiable interface (from
// the package github.com/bradenrayhorn/ced/ced) used for unit testing.
type MockEmptiable struct {
	// EmptyFunc is an instance of a mock function object controlling the
	// behavior of the method Empty.
	EmptyFunc *EmptiableEmptyFunc
}

// NewMockEmptiable creates a new mock of the Emptiable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockEmptiable creates a new mock of the Emptiable interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockEmptiable() *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: func() bool {
				panic("unexpected invocation of MockEmptiable.Empty")
			},
		},
	}
}

// NewMockEmptiableFrom creates a new mock of the MockEmptiable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockEmptiableFrom(i ced.Emptiable) *MockEmptiable {
	return &MockEmptiable{
		EmptyFunc: &EmptiableEmptyFunc{
			defaultHook: i.Empty,
		},
	}
}

// EmptiableEmptyFunc describes the behavior when the Empty method of the
// parent MockEmptiable instance is invoked.
type EmptiableEmptyFunc struct {
	defaultHook func() bool
	hooks       []func() bool
	history     []EmptiableEmptyFuncCall
	mutex       sync.Mutex
}

// Empty delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEmptiable) Empty() bool {
	r0 := m.EmptyFunc.nextHook()()
	m.EmptyFunc.appendCall(EmptiableEmptyFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Empty method of the
// parent MockEmptiable instance is invoked and the hook queue is empty.
func (f *EmptiableEmptyFunc) SetDefaultHook(hook func() bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Empty method of the parent MockEmptiable instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *EmptiableEmptyFunc) PushHook(hook func() bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EmptiableEmptyFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func() bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EmptiableEmptyFunc) PushReturn(r0 bool) {
	f.PushHook(func() bool {
		return r0
	})
}

func (f *EmptiableEmptyFunc) nextHook() func() bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EmptiableEmptyFunc) appendCall(r0 EmptiableEmptyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EmptiableEmptyFuncCall objects describing
// the invocations of this function.
func (f *EmptiableEmptyFunc) History() []EmptiableEmptyFuncCall {
	f.mutex.Lock()
	history := make([]EmptiableEmptyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EmptiableEmptyFuncCall is an object that describes an invocation of
// method Empty on an instance of MockEmptiable.
type EmptiableEmptyFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EmptiableEmptyFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EmptiableEmptyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockError is a mock implementation of the Error interface (from the
// package github.com/bradenrayhorn/ced/ced) used for unit testing.
type MockError struct {
	// CedErrorFunc is an instance of a mock function object controlling the
	// behavior of the method CedError.
	CedErrorFunc *ErrorCedErrorFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *ErrorErrorFunc
}

// NewMockError creates a new mock of the Error interface. All methods
// return zero values for all results, unless overwritten.
func NewMockError() *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: func() (r0 string, r1 string) {
				return
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() (r0 string) {
				return
			},
		},
	}
}

// NewStrictMockError creates a new mock of the Error interface. All methods
// panic on invocation, unless overwritten.
func NewStrictMockError() *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: func() (string, string) {
				panic("unexpected invocation of MockError.CedError")
			},
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: func() string {
				panic("unexpected invocation of MockError.Error")
			},
		},
	}
}

// NewMockErrorFrom creates a new mock of the MockError interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockErrorFrom(i ced.Error) *MockError {
	return &MockError{
		CedErrorFunc: &ErrorCedErrorFunc{
			defaultHook: i.CedError,
		},
		ErrorFunc: &ErrorErrorFunc{
			defaultHook: i.Error,
		},
	}
}

// ErrorCedErrorFunc describes the behavior when the CedError method of the
// parent MockError instance is invoked.
type ErrorCedErrorFunc struct {
	defaultHook func() (string, string)
	hooks       []func() (string, string)
	history     []ErrorCedErrorFuncCall
	mutex       sync.Mutex
}

// CedError delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) CedError() (string, string) {
	r0, r1 := m.CedErrorFunc.nextHook()()
	m.CedErrorFunc.appendCall(ErrorCedErrorFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CedError method of
// the parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorCedErrorFunc) SetDefaultHook(hook func() (string, string)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CedError method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorCedErrorFunc) PushHook(hook func() (string, string)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorCedErrorFunc) SetDefaultReturn(r0 string, r1 string) {
	f.SetDefaultHook(func() (string, string) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorCedErrorFunc) PushReturn(r0 string, r1 string) {
	f.PushHook(func() (string, string) {
		return r0, r1
	})
}

func (f *ErrorCedErrorFunc) nextHook() func() (string, string) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorCedErrorFunc) appendCall(r0 ErrorCedErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorCedErrorFuncCall objects describing
// the invocations of this function.
func (f *ErrorCedErrorFunc) History() []ErrorCedErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorCedErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorCedErrorFuncCall is an object that describes an invocation of method
// CedError on an instance of MockError.
type ErrorCedErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorCedErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorCedErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ErrorErrorFunc describes the behavior when the Error method of the parent
// MockError instance is invoked.
type ErrorErrorFunc struct {
	defaultHook func() string
	hooks       []func() string
	history     []ErrorErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockError) Error() string {
	r0 := m.ErrorFunc.nextHook()()
	m.ErrorFunc.appendCall(ErrorErrorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockError instance is invoked and the hook queue is empty.
func (f *ErrorErrorFunc) SetDefaultHook(hook func() string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockError instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ErrorErrorFunc) PushHook(hook func() string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ErrorErrorFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func() string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ErrorErrorFunc) PushReturn(r0 string) {
	f.PushHook(func() string {
		return r0
	})
}

func (f *ErrorErrorFunc) nextHook() func() string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ErrorErrorFunc) appendCall(r0 ErrorErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ErrorErrorFuncCall objects describing the
// invocations of this function.
func (f *ErrorErrorFunc) History() []ErrorErrorFuncCall {
	f.mutex.Lock()
	history := make([]ErrorErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ErrorErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockError.
type ErrorErrorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ErrorErrorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ErrorErrorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockGroupContract is a mock implementation of the GroupContract interface
// (from the package github.com/bradenrayhorn/ced/ced) used for unit
// testing.
type MockGroupContract struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GroupContractCreateFunc
}

// NewMockGroupContract creates a new mock of the GroupContract interface.
// All methods return zero values for all results, unless overwritten.
func NewMockGroupContract() *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: func(context.Context, []ced.Name) (r0 ced.Group, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGroupContract creates a new mock of the GroupContract
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGroupContract() *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: func(context.Context, []ced.Name) (ced.Group, error) {
				panic("unexpected invocation of MockGroupContract.Create")
			},
		},
	}
}

// NewMockGroupContractFrom creates a new mock of the MockGroupContract
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockGroupContractFrom(i ced.GroupContract) *MockGroupContract {
	return &MockGroupContract{
		CreateFunc: &GroupContractCreateFunc{
			defaultHook: i.Create,
		},
	}
}

// GroupContractCreateFunc describes the behavior when the Create method of
// the parent MockGroupContract instance is invoked.
type GroupContractCreateFunc struct {
	defaultHook func(context.Context, []ced.Name) (ced.Group, error)
	hooks       []func(context.Context, []ced.Name) (ced.Group, error)
	history     []GroupContractCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupContract) Create(v0 context.Context, v1 []ced.Name) (ced.Group, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(GroupContractCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGroupContract instance is invoked and the hook queue is empty.
func (f *GroupContractCreateFunc) SetDefaultHook(hook func(context.Context, []ced.Name) (ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGroupContract instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupContractCreateFunc) PushHook(hook func(context.Context, []ced.Name) (ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupContractCreateFunc) SetDefaultReturn(r0 ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, []ced.Name) (ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupContractCreateFunc) PushReturn(r0 ced.Group, r1 error) {
	f.PushHook(func(context.Context, []ced.Name) (ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupContractCreateFunc) nextHook() func(context.Context, []ced.Name) (ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupContractCreateFunc) appendCall(r0 GroupContractCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupContractCreateFuncCall objects
// describing the invocations of this function.
func (f *GroupContractCreateFunc) History() []GroupContractCreateFuncCall {
	f.mutex.Lock()
	history := make([]GroupContractCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupContractCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockGroupContract.
type GroupContractCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []ced.Name
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupContractCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupContractCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockGroupRespository is a mock implementation of the GroupRespository
// interface (from the package github.com/bradenrayhorn/ced/ced) used for
// unit testing.
type MockGroupRespository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *GroupRespositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *GroupRespositoryGetFunc
}

// NewMockGroupRespository creates a new mock of the GroupRespository
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGroupRespository() *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Group) (r0 error) {
				return
			},
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (r0 ced.Group, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGroupRespository creates a new mock of the GroupRespository
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockGroupRespository() *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Group) error {
				panic("unexpected invocation of MockGroupRespository.Create")
			},
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (ced.Group, error) {
				panic("unexpected invocation of MockGroupRespository.Get")
			},
		},
	}
}

// NewMockGroupRespositoryFrom creates a new mock of the
// MockGroupRespository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGroupRespositoryFrom(i ced.GroupRespository) *MockGroupRespository {
	return &MockGroupRespository{
		CreateFunc: &GroupRespositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &GroupRespositoryGetFunc{
			defaultHook: i.Get,
		},
	}
}

// GroupRespositoryCreateFunc describes the behavior when the Create method
// of the parent MockGroupRespository instance is invoked.
type GroupRespositoryCreateFunc struct {
	defaultHook func(context.Context, ced.Group) error
	hooks       []func(context.Context, ced.Group) error
	history     []GroupRespositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupRespository) Create(v0 context.Context, v1 ced.Group) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(GroupRespositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockGroupRespository instance is invoked and the hook queue is
// empty.
func (f *GroupRespositoryCreateFunc) SetDefaultHook(hook func(context.Context, ced.Group) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockGroupRespository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GroupRespositoryCreateFunc) PushHook(hook func(context.Context, ced.Group) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.Group) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.Group) error {
		return r0
	})
}

func (f *GroupRespositoryCreateFunc) nextHook() func(context.Context, ced.Group) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositoryCreateFunc) appendCall(r0 GroupRespositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *GroupRespositoryCreateFunc) History() []GroupRespositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositoryCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockGroupRespository.
type GroupRespositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Group
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GroupRespositoryGetFunc describes the behavior when the Get method of the
// parent MockGroupRespository instance is invoked.
type GroupRespositoryGetFunc struct {
	defaultHook func(context.Context, ced.ID) (ced.Group, error)
	hooks       []func(context.Context, ced.ID) (ced.Group, error)
	history     []GroupRespositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGroupRespository) Get(v0 context.Context, v1 ced.ID) (ced.Group, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(GroupRespositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockGroupRespository instance is invoked and the hook queue is
// empty.
func (f *GroupRespositoryGetFunc) SetDefaultHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockGroupRespository instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *GroupRespositoryGetFunc) PushHook(hook func(context.Context, ced.ID) (ced.Group, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GroupRespositoryGetFunc) SetDefaultReturn(r0 ced.Group, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GroupRespositoryGetFunc) PushReturn(r0 ced.Group, r1 error) {
	f.PushHook(func(context.Context, ced.ID) (ced.Group, error) {
		return r0, r1
	})
}

func (f *GroupRespositoryGetFunc) nextHook() func(context.Context, ced.ID) (ced.Group, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GroupRespositoryGetFunc) appendCall(r0 GroupRespositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GroupRespositoryGetFuncCall objects
// describing the invocations of this function.
func (f *GroupRespositoryGetFunc) History() []GroupRespositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]GroupRespositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GroupRespositoryGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockGroupRespository.
type GroupRespositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Group
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GroupRespositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GroupRespositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockIndividualContract is a mock implementation of the IndividualContract
// interface (from the package github.com/bradenrayhorn/ced/ced) used for
// unit testing.
type MockIndividualContract struct {
	// GetInGroupFunc is an instance of a mock function object controlling
	// the behavior of the method GetInGroup.
	GetInGroupFunc *IndividualContractGetInGroupFunc
	// SearchByNameFunc is an instance of a mock function object controlling
	// the behavior of the method SearchByName.
	SearchByNameFunc *IndividualContractSearchByNameFunc
	// SetResponseFunc is an instance of a mock function object controlling
	// the behavior of the method SetResponse.
	SetResponseFunc *IndividualContractSetResponseFunc
}

// NewMockIndividualContract creates a new mock of the IndividualContract
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockIndividualContract() *MockIndividualContract {
	return &MockIndividualContract{
		GetInGroupFunc: &IndividualContractGetInGroupFunc{
			defaultHook: func(context.Context, ced.ID) (r0 []ced.Individual, r1 error) {
				return
			},
		},
		SearchByNameFunc: &IndividualContractSearchByNameFunc{
			defaultHook: func(context.Context, string) (r0 map[ced.ID][]ced.Individual, r1 error) {
				return
			},
		},
		SetResponseFunc: &IndividualContractSetResponseFunc{
			defaultHook: func(context.Context, ced.ID, bool) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockIndividualContract creates a new mock of the
// IndividualContract interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockIndividualContract() *MockIndividualContract {
	return &MockIndividualContract{
		GetInGroupFunc: &IndividualContractGetInGroupFunc{
			defaultHook: func(context.Context, ced.ID) ([]ced.Individual, error) {
				panic("unexpected invocation of MockIndividualContract.GetInGroup")
			},
		},
		SearchByNameFunc: &IndividualContractSearchByNameFunc{
			defaultHook: func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
				panic("unexpected invocation of MockIndividualContract.SearchByName")
			},
		},
		SetResponseFunc: &IndividualContractSetResponseFunc{
			defaultHook: func(context.Context, ced.ID, bool) error {
				panic("unexpected invocation of MockIndividualContract.SetResponse")
			},
		},
	}
}

// NewMockIndividualContractFrom creates a new mock of the
// MockIndividualContract interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockIndividualContractFrom(i ced.IndividualContract) *MockIndividualContract {
	return &MockIndividualContract{
		GetInGroupFunc: &IndividualContractGetInGroupFunc{
			defaultHook: i.GetInGroup,
		},
		SearchByNameFunc: &IndividualContractSearchByNameFunc{
			defaultHook: i.SearchByName,
		},
		SetResponseFunc: &IndividualContractSetResponseFunc{
			defaultHook: i.SetResponse,
		},
	}
}

// IndividualContractGetInGroupFunc describes the behavior when the
// GetInGroup method of the parent MockIndividualContract instance is
// invoked.
type IndividualContractGetInGroupFunc struct {
	defaultHook func(context.Context, ced.ID) ([]ced.Individual, error)
	hooks       []func(context.Context, ced.ID) ([]ced.Individual, error)
	history     []IndividualContractGetInGroupFuncCall
	mutex       sync.Mutex
}

// GetInGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIndividualContract) GetInGroup(v0 context.Context, v1 ced.ID) ([]ced.Individual, error) {
	r0, r1 := m.GetInGroupFunc.nextHook()(v0, v1)
	m.GetInGroupFunc.appendCall(IndividualContractGetInGroupFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetInGroup method of
// the parent MockIndividualContract instance is invoked and the hook queue
// is empty.
func (f *IndividualContractGetInGroupFunc) SetDefaultHook(hook func(context.Context, ced.ID) ([]ced.Individual, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetInGroup method of the parent MockIndividualContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IndividualContractGetInGroupFunc) PushHook(hook func(context.Context, ced.ID) ([]ced.Individual, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualContractGetInGroupFunc) SetDefaultReturn(r0 []ced.Individual, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) ([]ced.Individual, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualContractGetInGroupFunc) PushReturn(r0 []ced.Individual, r1 error) {
	f.PushHook(func(context.Context, ced.ID) ([]ced.Individual, error) {
		return r0, r1
	})
}

func (f *IndividualContractGetInGroupFunc) nextHook() func(context.Context, ced.ID) ([]ced.Individual, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualContractGetInGroupFunc) appendCall(r0 IndividualContractGetInGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualContractGetInGroupFuncCall
// objects describing the invocations of this function.
func (f *IndividualContractGetInGroupFunc) History() []IndividualContractGetInGroupFuncCall {
	f.mutex.Lock()
	history := make([]IndividualContractGetInGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualContractGetInGroupFuncCall is an object that describes an
// invocation of method GetInGroup on an instance of MockIndividualContract.
type IndividualContractGetInGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []ced.Individual
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualContractGetInGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualContractGetInGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IndividualContractSearchByNameFunc describes the behavior when the
// SearchByName method of the parent MockIndividualContract instance is
// invoked.
type IndividualContractSearchByNameFunc struct {
	defaultHook func(context.Context, string) (map[ced.ID][]ced.Individual, error)
	hooks       []func(context.Context, string) (map[ced.ID][]ced.Individual, error)
	history     []IndividualContractSearchByNameFuncCall
	mutex       sync.Mutex
}

// SearchByName delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIndividualContract) SearchByName(v0 context.Context, v1 string) (map[ced.ID][]ced.Individual, error) {
	r0, r1 := m.SearchByNameFunc.nextHook()(v0, v1)
	m.SearchByNameFunc.appendCall(IndividualContractSearchByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SearchByName method
// of the parent MockIndividualContract instance is invoked and the hook
// queue is empty.
func (f *IndividualContractSearchByNameFunc) SetDefaultHook(hook func(context.Context, string) (map[ced.ID][]ced.Individual, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchByName method of the parent MockIndividualContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IndividualContractSearchByNameFunc) PushHook(hook func(context.Context, string) (map[ced.ID][]ced.Individual, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualContractSearchByNameFunc) SetDefaultReturn(r0 map[ced.ID][]ced.Individual, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualContractSearchByNameFunc) PushReturn(r0 map[ced.ID][]ced.Individual, r1 error) {
	f.PushHook(func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
		return r0, r1
	})
}

func (f *IndividualContractSearchByNameFunc) nextHook() func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualContractSearchByNameFunc) appendCall(r0 IndividualContractSearchByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualContractSearchByNameFuncCall
// objects describing the invocations of this function.
func (f *IndividualContractSearchByNameFunc) History() []IndividualContractSearchByNameFuncCall {
	f.mutex.Lock()
	history := make([]IndividualContractSearchByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualContractSearchByNameFuncCall is an object that describes an
// invocation of method SearchByName on an instance of
// MockIndividualContract.
type IndividualContractSearchByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[ced.ID][]ced.Individual
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualContractSearchByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualContractSearchByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IndividualContractSetResponseFunc describes the behavior when the
// SetResponse method of the parent MockIndividualContract instance is
// invoked.
type IndividualContractSetResponseFunc struct {
	defaultHook func(context.Context, ced.ID, bool) error
	hooks       []func(context.Context, ced.ID, bool) error
	history     []IndividualContractSetResponseFuncCall
	mutex       sync.Mutex
}

// SetResponse delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIndividualContract) SetResponse(v0 context.Context, v1 ced.ID, v2 bool) error {
	r0 := m.SetResponseFunc.nextHook()(v0, v1, v2)
	m.SetResponseFunc.appendCall(IndividualContractSetResponseFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetResponse method
// of the parent MockIndividualContract instance is invoked and the hook
// queue is empty.
func (f *IndividualContractSetResponseFunc) SetDefaultHook(hook func(context.Context, ced.ID, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetResponse method of the parent MockIndividualContract instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IndividualContractSetResponseFunc) PushHook(hook func(context.Context, ced.ID, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualContractSetResponseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.ID, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualContractSetResponseFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.ID, bool) error {
		return r0
	})
}

func (f *IndividualContractSetResponseFunc) nextHook() func(context.Context, ced.ID, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualContractSetResponseFunc) appendCall(r0 IndividualContractSetResponseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualContractSetResponseFuncCall
// objects describing the invocations of this function.
func (f *IndividualContractSetResponseFunc) History() []IndividualContractSetResponseFuncCall {
	f.mutex.Lock()
	history := make([]IndividualContractSetResponseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualContractSetResponseFuncCall is an object that describes an
// invocation of method SetResponse on an instance of
// MockIndividualContract.
type IndividualContractSetResponseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualContractSetResponseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualContractSetResponseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockIndividualRespository is a mock implementation of the
// IndividualRespository interface (from the package
// github.com/bradenrayhorn/ced/ced) used for unit testing.
type MockIndividualRespository struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *IndividualRespositoryCreateFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *IndividualRespositoryGetFunc
	// GetByGroupFunc is an instance of a mock function object controlling
	// the behavior of the method GetByGroup.
	GetByGroupFunc *IndividualRespositoryGetByGroupFunc
	// SearchByNameFunc is an instance of a mock function object controlling
	// the behavior of the method SearchByName.
	SearchByNameFunc *IndividualRespositorySearchByNameFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *IndividualRespositoryUpdateFunc
}

// NewMockIndividualRespository creates a new mock of the
// IndividualRespository interface. All methods return zero values for all
// results, unless overwritten.
func NewMockIndividualRespository() *MockIndividualRespository {
	return &MockIndividualRespository{
		CreateFunc: &IndividualRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Individual) (r0 error) {
				return
			},
		},
		GetFunc: &IndividualRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (r0 ced.Individual, r1 error) {
				return
			},
		},
		GetByGroupFunc: &IndividualRespositoryGetByGroupFunc{
			defaultHook: func(context.Context, ced.ID) (r0 []ced.Individual, r1 error) {
				return
			},
		},
		SearchByNameFunc: &IndividualRespositorySearchByNameFunc{
			defaultHook: func(context.Context, string) (r0 map[ced.ID][]ced.Individual, r1 error) {
				return
			},
		},
		UpdateFunc: &IndividualRespositoryUpdateFunc{
			defaultHook: func(context.Context, ced.Individual) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockIndividualRespository creates a new mock of the
// IndividualRespository interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockIndividualRespository() *MockIndividualRespository {
	return &MockIndividualRespository{
		CreateFunc: &IndividualRespositoryCreateFunc{
			defaultHook: func(context.Context, ced.Individual) error {
				panic("unexpected invocation of MockIndividualRespository.Create")
			},
		},
		GetFunc: &IndividualRespositoryGetFunc{
			defaultHook: func(context.Context, ced.ID) (ced.Individual, error) {
				panic("unexpected invocation of MockIndividualRespository.Get")
			},
		},
		GetByGroupFunc: &IndividualRespositoryGetByGroupFunc{
			defaultHook: func(context.Context, ced.ID) ([]ced.Individual, error) {
				panic("unexpected invocation of MockIndividualRespository.GetByGroup")
			},
		},
		SearchByNameFunc: &IndividualRespositorySearchByNameFunc{
			defaultHook: func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
				panic("unexpected invocation of MockIndividualRespository.SearchByName")
			},
		},
		UpdateFunc: &IndividualRespositoryUpdateFunc{
			defaultHook: func(context.Context, ced.Individual) error {
				panic("unexpected invocation of MockIndividualRespository.Update")
			},
		},
	}
}

// NewMockIndividualRespositoryFrom creates a new mock of the
// MockIndividualRespository interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockIndividualRespositoryFrom(i ced.IndividualRespository) *MockIndividualRespository {
	return &MockIndividualRespository{
		CreateFunc: &IndividualRespositoryCreateFunc{
			defaultHook: i.Create,
		},
		GetFunc: &IndividualRespositoryGetFunc{
			defaultHook: i.Get,
		},
		GetByGroupFunc: &IndividualRespositoryGetByGroupFunc{
			defaultHook: i.GetByGroup,
		},
		SearchByNameFunc: &IndividualRespositorySearchByNameFunc{
			defaultHook: i.SearchByName,
		},
		UpdateFunc: &IndividualRespositoryUpdateFunc{
			defaultHook: i.Update,
		},
	}
}

// IndividualRespositoryCreateFunc describes the behavior when the Create
// method of the parent MockIndividualRespository instance is invoked.
type IndividualRespositoryCreateFunc struct {
	defaultHook func(context.Context, ced.Individual) error
	hooks       []func(context.Context, ced.Individual) error
	history     []IndividualRespositoryCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIndividualRespository) Create(v0 context.Context, v1 ced.Individual) error {
	r0 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(IndividualRespositoryCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockIndividualRespository instance is invoked and the hook queue
// is empty.
func (f *IndividualRespositoryCreateFunc) SetDefaultHook(hook func(context.Context, ced.Individual) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockIndividualRespository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IndividualRespositoryCreateFunc) PushHook(hook func(context.Context, ced.Individual) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualRespositoryCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.Individual) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualRespositoryCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.Individual) error {
		return r0
	})
}

func (f *IndividualRespositoryCreateFunc) nextHook() func(context.Context, ced.Individual) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualRespositoryCreateFunc) appendCall(r0 IndividualRespositoryCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualRespositoryCreateFuncCall objects
// describing the invocations of this function.
func (f *IndividualRespositoryCreateFunc) History() []IndividualRespositoryCreateFuncCall {
	f.mutex.Lock()
	history := make([]IndividualRespositoryCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualRespositoryCreateFuncCall is an object that describes an
// invocation of method Create on an instance of MockIndividualRespository.
type IndividualRespositoryCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Individual
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualRespositoryCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualRespositoryCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IndividualRespositoryGetFunc describes the behavior when the Get method
// of the parent MockIndividualRespository instance is invoked.
type IndividualRespositoryGetFunc struct {
	defaultHook func(context.Context, ced.ID) (ced.Individual, error)
	hooks       []func(context.Context, ced.ID) (ced.Individual, error)
	history     []IndividualRespositoryGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIndividualRespository) Get(v0 context.Context, v1 ced.ID) (ced.Individual, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(IndividualRespositoryGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockIndividualRespository instance is invoked and the hook queue
// is empty.
func (f *IndividualRespositoryGetFunc) SetDefaultHook(hook func(context.Context, ced.ID) (ced.Individual, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockIndividualRespository instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IndividualRespositoryGetFunc) PushHook(hook func(context.Context, ced.ID) (ced.Individual, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualRespositoryGetFunc) SetDefaultReturn(r0 ced.Individual, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) (ced.Individual, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualRespositoryGetFunc) PushReturn(r0 ced.Individual, r1 error) {
	f.PushHook(func(context.Context, ced.ID) (ced.Individual, error) {
		return r0, r1
	})
}

func (f *IndividualRespositoryGetFunc) nextHook() func(context.Context, ced.ID) (ced.Individual, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualRespositoryGetFunc) appendCall(r0 IndividualRespositoryGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualRespositoryGetFuncCall objects
// describing the invocations of this function.
func (f *IndividualRespositoryGetFunc) History() []IndividualRespositoryGetFuncCall {
	f.mutex.Lock()
	history := make([]IndividualRespositoryGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualRespositoryGetFuncCall is an object that describes an
// invocation of method Get on an instance of MockIndividualRespository.
type IndividualRespositoryGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 ced.Individual
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualRespositoryGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualRespositoryGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IndividualRespositoryGetByGroupFunc describes the behavior when the
// GetByGroup method of the parent MockIndividualRespository instance is
// invoked.
type IndividualRespositoryGetByGroupFunc struct {
	defaultHook func(context.Context, ced.ID) ([]ced.Individual, error)
	hooks       []func(context.Context, ced.ID) ([]ced.Individual, error)
	history     []IndividualRespositoryGetByGroupFuncCall
	mutex       sync.Mutex
}

// GetByGroup delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIndividualRespository) GetByGroup(v0 context.Context, v1 ced.ID) ([]ced.Individual, error) {
	r0, r1 := m.GetByGroupFunc.nextHook()(v0, v1)
	m.GetByGroupFunc.appendCall(IndividualRespositoryGetByGroupFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByGroup method of
// the parent MockIndividualRespository instance is invoked and the hook
// queue is empty.
func (f *IndividualRespositoryGetByGroupFunc) SetDefaultHook(hook func(context.Context, ced.ID) ([]ced.Individual, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByGroup method of the parent MockIndividualRespository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IndividualRespositoryGetByGroupFunc) PushHook(hook func(context.Context, ced.ID) ([]ced.Individual, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualRespositoryGetByGroupFunc) SetDefaultReturn(r0 []ced.Individual, r1 error) {
	f.SetDefaultHook(func(context.Context, ced.ID) ([]ced.Individual, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualRespositoryGetByGroupFunc) PushReturn(r0 []ced.Individual, r1 error) {
	f.PushHook(func(context.Context, ced.ID) ([]ced.Individual, error) {
		return r0, r1
	})
}

func (f *IndividualRespositoryGetByGroupFunc) nextHook() func(context.Context, ced.ID) ([]ced.Individual, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualRespositoryGetByGroupFunc) appendCall(r0 IndividualRespositoryGetByGroupFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualRespositoryGetByGroupFuncCall
// objects describing the invocations of this function.
func (f *IndividualRespositoryGetByGroupFunc) History() []IndividualRespositoryGetByGroupFuncCall {
	f.mutex.Lock()
	history := make([]IndividualRespositoryGetByGroupFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualRespositoryGetByGroupFuncCall is an object that describes an
// invocation of method GetByGroup on an instance of
// MockIndividualRespository.
type IndividualRespositoryGetByGroupFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.ID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []ced.Individual
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualRespositoryGetByGroupFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualRespositoryGetByGroupFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IndividualRespositorySearchByNameFunc describes the behavior when the
// SearchByName method of the parent MockIndividualRespository instance is
// invoked.
type IndividualRespositorySearchByNameFunc struct {
	defaultHook func(context.Context, string) (map[ced.ID][]ced.Individual, error)
	hooks       []func(context.Context, string) (map[ced.ID][]ced.Individual, error)
	history     []IndividualRespositorySearchByNameFuncCall
	mutex       sync.Mutex
}

// SearchByName delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIndividualRespository) SearchByName(v0 context.Context, v1 string) (map[ced.ID][]ced.Individual, error) {
	r0, r1 := m.SearchByNameFunc.nextHook()(v0, v1)
	m.SearchByNameFunc.appendCall(IndividualRespositorySearchByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SearchByName method
// of the parent MockIndividualRespository instance is invoked and the hook
// queue is empty.
func (f *IndividualRespositorySearchByNameFunc) SetDefaultHook(hook func(context.Context, string) (map[ced.ID][]ced.Individual, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchByName method of the parent MockIndividualRespository instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IndividualRespositorySearchByNameFunc) PushHook(hook func(context.Context, string) (map[ced.ID][]ced.Individual, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualRespositorySearchByNameFunc) SetDefaultReturn(r0 map[ced.ID][]ced.Individual, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualRespositorySearchByNameFunc) PushReturn(r0 map[ced.ID][]ced.Individual, r1 error) {
	f.PushHook(func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
		return r0, r1
	})
}

func (f *IndividualRespositorySearchByNameFunc) nextHook() func(context.Context, string) (map[ced.ID][]ced.Individual, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualRespositorySearchByNameFunc) appendCall(r0 IndividualRespositorySearchByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualRespositorySearchByNameFuncCall
// objects describing the invocations of this function.
func (f *IndividualRespositorySearchByNameFunc) History() []IndividualRespositorySearchByNameFuncCall {
	f.mutex.Lock()
	history := make([]IndividualRespositorySearchByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualRespositorySearchByNameFuncCall is an object that describes an
// invocation of method SearchByName on an instance of
// MockIndividualRespository.
type IndividualRespositorySearchByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[ced.ID][]ced.Individual
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualRespositorySearchByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualRespositorySearchByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IndividualRespositoryUpdateFunc describes the behavior when the Update
// method of the parent MockIndividualRespository instance is invoked.
type IndividualRespositoryUpdateFunc struct {
	defaultHook func(context.Context, ced.Individual) error
	hooks       []func(context.Context, ced.Individual) error
	history     []IndividualRespositoryUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIndividualRespository) Update(v0 context.Context, v1 ced.Individual) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1)
	m.UpdateFunc.appendCall(IndividualRespositoryUpdateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockIndividualRespository instance is invoked and the hook queue
// is empty.
func (f *IndividualRespositoryUpdateFunc) SetDefaultHook(hook func(context.Context, ced.Individual) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockIndividualRespository instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IndividualRespositoryUpdateFunc) PushHook(hook func(context.Context, ced.Individual) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *IndividualRespositoryUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ced.Individual) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *IndividualRespositoryUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ced.Individual) error {
		return r0
	})
}

func (f *IndividualRespositoryUpdateFunc) nextHook() func(context.Context, ced.Individual) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndividualRespositoryUpdateFunc) appendCall(r0 IndividualRespositoryUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndividualRespositoryUpdateFuncCall objects
// describing the invocations of this function.
func (f *IndividualRespositoryUpdateFunc) History() []IndividualRespositoryUpdateFuncCall {
	f.mutex.Lock()
	history := make([]IndividualRespositoryUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndividualRespositoryUpdateFuncCall is an object that describes an
// invocation of method Update on an instance of MockIndividualRespository.
type IndividualRespositoryUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 ced.Individual
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndividualRespositoryUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndividualRespositoryUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockValidatable is a mock implementation of the Validatable interface
// (from the package github.com/bradenrayhorn/ced/ced) used for unit
// testing.
type MockValidatable struct {
	// ValidateFunc is an instance of a mock function object controlling the
	// behavior of the method Validate.
	ValidateFunc *ValidatableValidateFunc
}

// NewMockValidatable creates a new mock of the Validatable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockValidatable creates a new mock of the Validatable interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockValidatable() *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: func() error {
				panic("unexpected invocation of MockValidatable.Validate")
			},
		},
	}
}

// NewMockValidatableFrom creates a new mock of the MockValidatable
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockValidatableFrom(i ced.Validatable) *MockValidatable {
	return &MockValidatable{
		ValidateFunc: &ValidatableValidateFunc{
			defaultHook: i.Validate,
		},
	}
}

// ValidatableValidateFunc describes the behavior when the Validate method
// of the parent MockValidatable instance is invoked.
type ValidatableValidateFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ValidatableValidateFuncCall
	mutex       sync.Mutex
}

// Validate delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockValidatable) Validate() error {
	r0 := m.ValidateFunc.nextHook()()
	m.ValidateFunc.appendCall(ValidatableValidateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Validate method of
// the parent MockValidatable instance is invoked and the hook queue is
// empty.
func (f *ValidatableValidateFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Validate method of the parent MockValidatable instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ValidatableValidateFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ValidatableValidateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ValidatableValidateFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ValidatableValidateFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ValidatableValidateFunc) appendCall(r0 ValidatableValidateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ValidatableValidateFuncCall objects
// describing the invocations of this function.
func (f *ValidatableValidateFunc) History() []ValidatableValidateFuncCall {
	f.mutex.Lock()
	history := make([]ValidatableValidateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ValidatableValidateFuncCall is an object that describes an invocation of
// method Validate on an instance of MockValidatable.
type ValidatableValidateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ValidatableValidateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ValidatableValidateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
